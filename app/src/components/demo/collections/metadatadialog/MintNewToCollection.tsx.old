import { AttachmentIcon, CalendarIcon } from "@chakra-ui/icons";
import {
  Alert,
  Box,
  Checkbox,
  Collapse,
  Input,
  InputGroup,
  InputLeftElement,
  LightMode,
  Text,
} from "@chakra-ui/react";
import { Keypair, PublicKey } from "@solana/web3.js";
import { KeyGenerator } from "components/KeyGenerator";
import { IRpcObject } from "components/executor/IRpcObject";
import { Group } from "query/group";
import { useEffect, useMemo, useState } from "react";
import { MutableInfoPanel } from "./MutableInfoDialog";
import { RoyalOverridePanel } from "./RoyaltyOverridePanel";
import { AttributeSelectorPanel } from "./AttributeSelectorPanel";
import { generateKey } from "crypto";
import { CopyPublicKeyButton } from "components/buttons/CopyPublicKeyButton";
import { ImageUploader } from "components/shadowdrive/ImageUploader";

enum Status {
  NotStarted,
  Processing,
  Success,
}

enum UrlMode {
  Shadow,
  String,
}
export const MintNewToCollection = ({
  collection,
}: {
  collection: IRpcObject<Group>;
}) => {
  const [generatedMint, setGeneratedMint] = useState<Keypair>(
    Keypair.generate()
  );

  const [status, setStatus] = useState<Status>(Status.NotStarted);

  const [name, setName] = useState<string>("");

  const [url, setUrl] = useState<string>("");

  const [isMutable, setIsMutable] = useState<boolean>(false);

  const numberOfAttributes = useMemo(
    () => collection?.item?.attributeTypes?.length ?? 0,
    [collection]
  );

  useEffect(() => {
    setStatus(Status.NotStarted);
  }, [generatedMint]);

  const [attributes, setAttributes] = useState<number[]>([
    ...Array(numberOfAttributes),
  ]);

  const [selectedMint, setSelectedMint] = useState<Keypair>();

  return (
    <Box display="flex" rowGap={1} flexDirection="column">
      <InputGroup>
        <InputLeftElement pointerEvents="none">
          <CalendarIcon color="gray.300" />
        </InputLeftElement>
        <Input
          placeholder="Metadata name"
          value={name}
          onChange={(e) => setName(e.currentTarget.value)}
        />
      </InputGroup>

      <Box
        display="flex"
        alignItems="center"
        flexDirection="row"
        sx={{ justifyContent: "space-between" }}
        columnGap={2}
      >
        <Checkbox
          checked={isMutable}
          onChange={(e) => {
            setIsMutable(e.currentTarget.checked);
          }}
          colorScheme="red"
        >
          Mutable
        </Checkbox>
        <MutableInfoPanel />
      </Box>
      <AttributeSelectorPanel
        attributes={attributes}
        setAttributes={setAttributes}
        collection={collection}
      />

      <RoyalOverridePanel />

      <KeyGenerator
        generatedMint={generatedMint}
        setGeneratedMint={setGeneratedMint}
      />

      {status !== Status.Success && (
        <CreateMetadataButton
          beforeClick={() => {
            setStatus(Status.Processing);
            setSelectedMint(generatedMint);
          }}
          onSuccess={() => {
            setStatus(Status.Success);
          }}
          params={{
            name,
            attributes,
            collection: collection.pubkey,
            mint: generatedMint,
          }}
          formatting={{
            isDisabled: status !== Status.NotStarted,
          }}
        />
      )}

      {status === Status.Success && selectedMint && (
        <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
          }}
        >
          <Text>Metadata added to mint:</Text>
          <Box p={1}>
            <CopyPublicKeyButton
              publicKey={selectedMint.publicKey.toBase58()}
            />
          </Box>
          <Text>Please generate a new key to create another.</Text>
        </Box>
      )}
    </Box>
  );
};
